@model IEnumerable<BookChain.Models.Purchase.PurchaseModel>

@{
    ViewData["Title"] = "Index";
}

<style>
    #pieChartTitle {
        font-size: 24px;
        margin-left: 100px;
    }

    #postsChart {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        position: relative;
    }

    path.slice {
        stroke-width: 2px;
    }

    polyline {
        opacity: .3;
        stroke: black;
        stroke-width: 2px;
        fill: none;
    }
</style>

<h2>Index</h2>

<form asp-controller="Purchases" asp-action="Index" method="get">
    <p>
        BuyerName: <input type="text" name="BuyerName">
        BuyerPhone: <input type="text" name="BuyerPhone">
        BookTitle: <input type="text" name="BookTitle">
        SellerName <input type="text" name="SellerName">
        <input type="submit" value="Filter" />
    </p>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.BuyerName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BuyerPhone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BookTitle)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PaidPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SellerName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OrderDate)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.BuyerName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BuyerPhone)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BookTitle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaidPrice)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SellerName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OrderDate)
                </td>
            </tr>
        }
    </tbody>
</table>

<svg width="600" height="500"></svg>
<ul id="pieChartTitle">Book's Genres Statistics</ul>
<ul id="postsChart"></ul>

@section scripts{
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script type="text/javascript">
        $(function () {
            $.ajax('Purchases/DatesStatistics/').done(function (grouped_purchases) {
                var svg = d3.select("svg"),
                    margin = 200,
                    width = svg.attr("width") - margin,
                    height = svg.attr("height") - margin

                svg.append("text")
                    .attr("transform", "translate(100,0)")
                    .attr("x", 50)
                    .attr("y", 50)
                    .attr("font-size", "24px")
                    .text("Revenue By Date Statistics")

                var xScale = d3.scaleBand().range([0, width]).padding(0.4),
                    yScale = d3.scaleLinear().range([height, 0]);

                var g = svg.append("g")
                    .attr("transform", "translate(" + 100 + "," + 100 + ")");

                xScale.domain(grouped_purchases.map(function (d) {
                    return d.orderDate.substring(0, 10);
                }));
                yScale.domain([0, d3.max(grouped_purchases, function (d) {
                    return d.revenue;
                })]);

                g.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(xScale))
                    .append("text")
                    .attr("y", height - 250)
                    .attr("x", width - 100)
                    .attr("text-anchor", "end")
                    .attr("stroke", "black")
                    .text("Date");

                g.append("g")
                    .call(d3.axisLeft(yScale).tickFormat(function (d) {
                        return "$" + d;
                    })
                        .ticks(10))
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", "-5.1em")
                    .attr("text-anchor", "end")
                    .attr("stroke", "black")
                    .text("Total Revenue");

                g.selectAll(".bar")
                    .data(grouped_purchases)
                    .enter().append("rect")

                    .style("fill", "steelblue")
                    .attr("class", "bar")
                    .attr("x", function (d) {
                        return xScale(d.orderDate.substring(0, 10));
                    })
                    .attr("y", function (d) {
                        return yScale(d.revenue);
                    })
                    .attr("width", xScale.bandwidth())
                    .attr("height", function (d) {
                        return height - yScale(d.revenue);
                    });
            });
        });

        $(function () {

            $.get('Purchases/GenersStatistics/').done(function (grouped_purchases) {
                var width = 450
                height = 450
                margin = 40;

                // The radius of the pieplot is half the width or half the height (smallest one)
                var radius = Math.min(width, height) / 2 - margin;

                // append the svg object to the div
                var svg = d3.select("#postsChart")
                    .append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .append("g")
                    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                var sumAllCount = 0;

                // Create data
                var data = grouped_purchases.map(function (d) {
                    sumAllCount += d.count;
                    return { key: d.genre, value: d.count };
                })

                // set the color scale
                var color = d3.scaleOrdinal()
                    .domain(data)
                    .range(d3.schemeSet2);

                // Compute the position of each group on the pie
                var pie = d3.pie()
                    .value(function (d) {
                        return d.value;
                    });

                var data_ready = pie(data);
                // Now I know that group A goes from 0 degrees to x degrees and so on

                // shape helper to build arcs
                var arcGenerator = d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius);

                // Build the pie chart
                svg.selectAll('mySlices')
                    .data(data_ready)
                    .enter()
                    .append('path')
                    .attr('d', arcGenerator)
                    .attr('fill', function (d) {
                        return (color(d.data.key))
                    })
                    .attr("stroke", "black")
                    .style("stroke-width", "2px")
                    .style("opacity", 0.7);

                // annotation
                svg.selectAll('mySlices')
                    .data(data_ready)
                    .enter()
                    .append('text')
                    .text(function (d) {
                        return d.data.key + " " + Math.round((d.data.value * 100) / sumAllCount) + "%";
                    })
                    .attr("transform", function (d) {
                        return "translate(" + arcGenerator.centroid(d) + ")";
                    })
                    .style("text-anchor", "middle")
                    .style("font-size", 17);
            });
        });
    </script>
}