@model IEnumerable<BookChain.Models.Branch>

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

<form asp-controller="Branches" asp-action="Index" method="get">
    <p>
        Country: <input type="text" name="Country">
        City: <input type="text" name="City">
        Owner: <input type="text" name="Owner">
        Phone: <input type="text" name="Phone">
        StoreName: <input type="text" name="Name">
        <input type="submit" value="Filter" />
    </p>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Country)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Street)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BuildingNumber)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Owner)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Phone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OpeningHours)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Country)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Street)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BuildingNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Owner)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Phone)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OpeningHours)
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="map">
    <div class="col-lg-12">
        <div class="pb-3 border-bottom">
            <div id="articleMap" class="img-thumbnail" style="width: 1200px; height: 600px;"></div>
        </div>
    </div>
</div>

@section Scripts
    {
    <script type="text/javascript">
        var map = null;
        var userLocation = null;
        var branches = @Html.Raw(Json.Serialize(Model));
        var branchesPinsArray = [];  // Created this because iterating over map entities is a pain in the ass and also in order to distinguish between branch-pin entities over other possible ones

        $('tr').click(function () {
            var branchId = $(this)[0].children[0].innerText;
            focusOnBranch(branchId);
        });

        function LoadMap() {
            createMap();
            setUserLocation();
            createInfoBox();

            Microsoft.Maps.loadModule('Microsoft.Maps.SpatialMath', function () { });  // Needed for distance calculation
            Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {
                searchManager = new Microsoft.Maps.Search.SearchManager(map);
                createBranchesPins(setMapInitialView);  // Call setMapInitialView() only after all pins get created
            });
        }

        function createMap() {
            map = new Microsoft.Maps.Map('#articleMap', {
                credentials: "AglcOvofpKm1X-WOXDY3_Cr0bxdAbKzUid-4bp7Em3BxbNPK_kT-X8iWI4B1RF0H",
                showMapTypeSelector: true,
                showZoomButtons: false,
                showLocateMeButton: true,
                showBreadcrumb: true
            });
        }

        function createInfoBox() {
            infobox = new Microsoft.Maps.Infobox(map.getCenter(), {
                visible: false
            });
            infobox.setMap(map);
            Microsoft.Maps.Events.addHandler(map, 'click', function () { infobox.setOptions({ visible: false }); });
        }

        function setUserLocation() {
            // If getting current position is not possible user the map center as the user location 
            userLocation = map.getCenter();
            navigator.geolocation.getCurrentPosition(function (position) {
                userLocation = new Microsoft.Maps.Location(
                    position.coords.latitude,
                    position.coords.longitude);
            });
        }

        // The geocode function which converts address into location calls the requestOptions callback function. 
        // This messes up the sync and makes it hard to point out when the function truly finished creating all pins. 
        // To solve this is the _callback parameter, it indicates which function should be called when all branch pins were truly created. 
        function createBranchesPins(_callback) {
            $.each(branches, function (idx, branch) {
                var address = branch.country + " " + branch.city + " " + branch.street + " " + branch.buildingNumber;
                var requestOptions = {
                    bounds: map.getBounds(),
                    where: address,
                    callback: function (answer, userData) {
                        createBranchPin(branch, answer.results[0].location);
                        if (branchesPinsArray.length == branches.length) {  // Was last branch pin created and this is the function's last iteration
                            _callback();
                        }
                    }
                };
                searchManager.geocode(requestOptions);  // Calls the requestOptions callback function
            });
        }

        function createBranchPin(branch, location) {
            var pin = new Microsoft.Maps.Pushpin(location, {
                title: branch.name,
                text: branch.id.toString(),
                enableHoverStyle: true
            });
            pin.metadata = {
                branchId: branch.id.toString(),
                owner: branch.owner,
                phone: branch.phone,
                hours: branch.openingHours
            }
            setPinWeather(pin);
            setPinDistance(pin);
            Microsoft.Maps.Events.addHandler(pin, 'mouseover', pushpinMouseOver);
            map.entities.push(pin);
            branchesPinsArray.push(pin);
        }

        // Set the initial view to the closest branch if possible, if not use user location
        function setMapInitialView() {
            var closestBranch = findClosestBranch();
            var bestViewLocation = (closestBranch) ? closestBranch.getLocation() : userLocation;
            map.setView({ center: bestViewLocation, zoom: 17 });
        }

        function findClosestBranch() {
            return branchesPinsArray.reduce(function (prev, curr) {
                return prev.metadata.distance < curr.metadata.distance ? prev : curr;
            });
        }

        function focusOnBranch(branchId) {
            var pin = branchesPinsArray.find(function (p) { return p.metadata.branchId == branchId; })
            if (pin) {
                map.setView({ center: pin.getLocation(), zoom: 17 });
                showPinInfo(pin);
            }
        }

        function pushpinMouseOver(e) {
            showPinInfo(e.target)
        }

        function showPinInfo(pin) {
            if (pin.metadata) {
                var metadata = pin.metadata;
                infobox.setOptions({
                    location: pin.getLocation(),
                    title: pin.getTitle(),
                    description: ("Owner: " + metadata.owner + " | Phone: " + metadata.phone + " | Opening Hours: " + metadata.hours + " | Weather: " + metadata.weather),
                    visible: true  // Clicking anywhere on the map should bring the visibility back to false
                });
            }
        }

        function setPinDistance(pin) {
            if (userLocation) {
                pin.metadata.distance = Microsoft.Maps.SpatialMath.getDistanceTo(pin.getLocation(), userLocation, Microsoft.Maps.SpatialMath.DistanceUnits.Miles);
            } else {
                pin.metadata.distance = Infinity;
            }
        }

        function setPinWeather(pin) {
            var key = 'e972e7f0d681d56210ca361472ee82e8';
            var location = pin.getLocation();
            fetch('https://api.openweathermap.org/data/2.5/weather?lat=' + location.latitude + '&lon=' + location.longitude + '&appid=' + key)
                .then(function (resp) { return resp.json() }) // Convert data to json
                .then(function (data) {
                    var celcius = Math.round(parseFloat(data.main.temp) - 273.15);
                    var weatherDesc = data.weather[0].description;
                    pin.metadata.weather = weatherDesc + " " + celcius + '&deg;';
                })
                .catch(function () {
                    pin.metadata.weather = "no weather data";
                });
        }

    </script>
    <script type="text/javascript" src="https://www.bing.com/api/maps/mapcontrol?callback=LoadMap" async defer></script>
}